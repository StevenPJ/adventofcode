name: Test Deployments

on:
  push:

jobs:
  deploy:
    name: Deploy my app
    runs-on: ubuntu-latest
    environment: prd
    steps:
      - uses: actions/checkout@v3

      - name: Delete Previous deployments
        uses: actions/github-script@v6
        with:
          script: |
            const deployments = await github.rest.repos.listDeployments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.sha
            });
            await Promise.all(
              deployments.data.map(async (deployment) => {
                # we can only delete inactive deployments, so let's deactivate them first
                await github.rest.repos.createDeploymentStatus({ 
                  owner: context.repo.owner, 
                  repo: context.repo.repo, 
                  deployment_id: deployment.id, 
                  state: 'inactive' 
                });
                return github.rest.repos.deleteDeployment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  deployment_id: deployment.id
                });
              })
            );

      - uses: chrnorm/deployment-action@v2
        id: deployment
        with:
          token: '${{ github.token }}'
          description: "Deploying to production"
          payload: '{"serviceName": "test-service", "namespace": "ssv"}'
          production-environment: false
          log-url: ${{ format('https://github.com/{0}/actions/runs/{1}', github.repository, github.run_id) }}
          environment-url: http://my-app-url.com
          environment: prd
          initial-status: queued
          owner: ${{ github.author }}

      - name: Deploy my app
        run: exit 1

      - name: Update deployment status (success)
        if: success()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'success'

      - name: Update deployment status (failure)
        if: failure()
        uses: chrnorm/deployment-status@v2
        with:
          token: '${{ github.token }}'
          environment-url: ${{ steps.deployment.outputs.environment_url }}
          deployment-id: ${{ steps.deployment.outputs.deployment_id }}
          state: 'failure'